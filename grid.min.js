const originalGridBasis=200;const imageLoaded=(elm,image,gridBasis)=>{const ratio=image.width/image.height;elm.style.flexBasis=gridBasis*ratio+"px";elm.style.flexGrow=ratio;elm.classList.add("photo-grid-loaded")};const imageRatio=gridBasis=>elm=>{const image=elm.querySelector(":scope > img");if(image.complete){imageLoaded(elm,image,gridBasis)}else{image.onload=(()=>imageLoaded(elm,image,gridBasis))}};const buildGrid=grid=>{const gridBasis=grid.dataset.gridBasis||defaultGridBasis;Array.from(grid.children).forEach(imageRatio(gridBasis));appendFakeElement(grid,gridBasis)};const findGrids=()=>Array.from(document.querySelectorAll(".photo-grid")).forEach(buildGrid);const appendFakeElement=(grid,gridBasis)=>{const li=document.createElement("li");li.classList.add("photo-grid-fake");li.style.flexBasis=gridBasis*(4/3)+"px";li.style.flexGrow=4/3;Array.from(Array(10)).forEach(()=>grid.appendChild(li.cloneNode(true)))};const addCss=()=>{const css=`\n.photo-grid {\n  display: flex;\n  flex-wrap: wrap;\n  padding: 0;\n  list-style:none;\n}\n.photo-grid img {\n  width: 100%;\n}\n.photo-grid > li {\n  position: relative;\n  margin: 2px;\n  line-height: 0;\n  cursor: pointer;\n  display: none;\n}\n\n.photo-grid > .photo-grid-fake {\n  margin: 0 2px;\n  display: initial;\n}\n\n.photo-grid > .photo-grid-loaded {\n  display: initial;\n}\n`;const sheet=document.createElement("style");sheet.innerHTML=css;document.head.appendChild(sheet)};document.addEventListener("DOMContentLoaded",()=>{addCss();findGrids()},false);