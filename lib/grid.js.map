{"version":3,"sources":["../src/grid.js"],"names":["defaultGridBasis","findGrids","effectAll","buildGrid","document","querySelectorAll","func","iterable","x","imageLoaded","elm","image","gridBasis","ratio","width","height","HTMLElement","style","flexBasis","flexGrow","toString","classList","add","imageRatio","querySelector","HTMLImageElement","complete","onload","grid","parseInt","dataset","children","appendFakeElement","li","createElement","appendChild","cloneNode","Array","addCss","css","sheet","Object","assign","innerHTML","head","addEventListener"],"mappings":"AACA,KAAMA,kBAAmB,GAAzB,CAEA,KAAMC,WAAY,IAAMC,UAAUC,SAAV,EAAqBC,SAASC,gBAAT,CAA0B,aAA1B,CAArB,CAAxB,CACA,KAAMH,WAAaI,IAAD,EAA4BC,UAAY,CAAE,IAAK,KAAMC,EAAX,GAAgBD,SAAhB,CAA0BD,KAAKE,CAAL,CAAS,CAA/F,CAEA,KAAMC,aAAc,CAACC,GAAD,CAAMC,KAAN,CAAaC,SAAb,GAA2B,CAC7C;AACA,KAAMC,OAAQF,MAAMG,KAAN,CAAcH,MAAMI,MAAlC,CAEA,GAAIL,cAAeM,YAAnB,CAAgC,CAC9B;AACAN,IAAIO,KAAJ,CAAUC,SAAV,CAAsBN,UAAYC,KAAZ,CAAoB,IAA1C,CAEA;AACAH,IAAIO,KAAJ,CAAUE,QAAV,CAAqBN,MAAMO,QAAN,EAArB,CAEA;AACAV,IAAIW,SAAJ,CAAcC,GAAd,CAAkB,mBAAlB,CACD,CACF,CAdD,CAgBA,KAAMC,YAAcX,SAAD,EAAwBF,GAAD,EAAsB,CAC9D,KAAMC,OAAQD,IAAIc,aAAJ,CAAkB,YAAlB,CAAd,CACA,GAAGb,gBAAiBc,iBAApB,CAAsC,CACpC,GAAId,OAASA,MAAMe,QAAnB,CAA6B,CAC3BjB,YAAYC,GAAZ,CAAiBC,KAAjB,CAAwBC,SAAxB,CACD,CAFD,IAEO,CACLD,MAAMgB,MAAN,CAAe,IAAMlB,YAAYC,GAAZ,CAAiBC,KAAjB,CAAwBC,SAAxB,CACtB,CACF,CACF,CATD,CAWA,KAAMT,WAAayB,IAAD,EAAuB,CACvC,KAAMhB,WAAYiB,SAASD,KAAKE,OAAL,CAAalB,SAAb,EAA0BZ,gBAAnC,CAAqD,EAArD,CAAlB,CACAE,UAAUqB,WAAWX,SAAX,CAAV,EAAiCgB,KAAKG,QAAtC,EAEA;AACAC,kBAAkBJ,IAAlB,CAAwBhB,SAAxB,CACD,CAND,CAQA,KAAMoB,mBAAoB,CAACJ,IAAD,CAAOhB,SAAP,GAAqB,CAC7C,KAAMqB,IAAK7B,SAAS8B,aAAT,CAAuB,IAAvB,CAAX,CACAD,GAAGZ,SAAH,CAAaC,GAAb,CAAiB,iBAAjB,EACAW,GAAGhB,KAAH,CAASC,SAAT,CAAqBN,WAAa,EAAI,CAAjB,EAAsB,IAA3C,CACAqB,GAAGhB,KAAH,CAASE,QAAT,CAAoB,CAAC,EAAI,CAAL,EAAQC,QAAR,EAApB,CAEAlB,UAAU,IAAM,CAAC0B,KAAKO,WAAL,CAAiBF,GAAGG,SAAH,CAAa,IAAb,CAAjB,CAAqC,CAAtD,EAAwDC,MAAM,EAAN,CAAxD,CACD,CAPD,CASA,KAAMC,QAAS,IAAM,CACnB,KAAMC,KAAO;;;;;;;;;;;;;;;;;;;;;;;;CAAb,CAyBE,KAAMC,OAAQC,OAAOC,MAAP,CAActC,SAAS8B,aAAT,CAAuB,OAAvB,CAAd,CAA+C,CAACS,UAAWJ,GAAZ,CAA/C,CAAd,CACA,GAAGnC,SAASwC,IAAZ,CAAkB,CAChBxC,SAASwC,IAAT,CAAcT,WAAd,CAA0BK,KAA1B,CACD,CACJ,CA9BD,CAgCA;AACAF,SAEAlC,SAASyC,gBAAT,CACE,kBADF,CAEE,IAAM,CACJ5C,WACD,CAJH,CAKE,KALF","file":"grid.js","sourcesContent":["/* @flow */\nconst defaultGridBasis = 200\n\nconst findGrids = () => effectAll(buildGrid)(document.querySelectorAll('.photo-grid'))\nconst effectAll = (func: (a: any) => void) => iterable => { for (const x of iterable) func(x) }\n\nconst imageLoaded = (elm, image, gridBasis) => {\n  // We'll be using the ratio to shrink each image\n  const ratio = image.width / image.height\n\n  if (elm instanceof HTMLElement) {\n    // This is the basis for our object.\n    elm.style.flexBasis = gridBasis * ratio + 'px'\n\n    // We'll then let each element grow dependent on it's width/height ratio.\n    elm.style.flexGrow = ratio.toString()\n\n    // We're ready to show the photo to the public.\n    elm.classList.add('photo-grid-loaded')\n  }\n}\n\nconst imageRatio = (gridBasis: number) => (elm: HTMLElement) => {\n  const image = elm.querySelector(':scope img')\n  if(image instanceof HTMLImageElement) {\n    if (image && image.complete) {\n      imageLoaded(elm, image, gridBasis)\n    } else {\n      image.onload = () => imageLoaded(elm, image, gridBasis)\n    }\n  }\n}\n\nconst buildGrid = (grid: HTMLElement) => {\n  const gridBasis = parseInt(grid.dataset.gridBasis || defaultGridBasis, 10)\n  effectAll(imageRatio(gridBasis))(grid.children)\n\n  // The fake elements are used to make the last few images get decent sized.\n  appendFakeElement(grid, gridBasis)\n}\n\nconst appendFakeElement = (grid, gridBasis) => {\n  const li = document.createElement('li')\n  li.classList.add('photo-grid-fake')\n  li.style.flexBasis = gridBasis * (4 / 3) + 'px'\n  li.style.flexGrow = (4 / 3).toString()\n\n  effectAll(() => {grid.appendChild(li.cloneNode(true))})(Array(10))\n}\n\nconst addCss = () => {\n  const css = `\n.photo-grid {\n  display: flex;\n  flex-wrap: wrap;\n  padding: 0;\n  list-style:none;\n}\n.photo-grid img {\n  width: 100%;\n}\n.photo-grid > li {\n  position: relative;\n  margin: 2px;\n  line-height: 0;\n  cursor: pointer;\n  display: none;\n}\n.photo-grid > .photo-grid-fake {\n  margin: 0 2px;\n  display: initial;\n}\n.photo-grid > .photo-grid-loaded {\n  display: initial;\n}\n`\n    const sheet = Object.assign(document.createElement('style'), {innerHTML: css})\n    if(document.head) {\n      document.head.appendChild(sheet)\n    }\n}\n\n// Add the css needed. This could potentially be broken out to a css file\naddCss()\n\ndocument.addEventListener(\n  'DOMContentLoaded',\n  () => {\n    findGrids()\n  },\n  false\n)\n"]}